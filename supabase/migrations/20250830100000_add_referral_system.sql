/*
# [Feature] Referral System
This migration sets up the database structure for a multi-level affiliate/referral program.

## Query Description:
This script adds new columns to the `profiles` table to store referral information and creates a new `referrals` table to track the relationships between referrers and referees. It also includes functions and triggers to automate the generation of unique referral codes for new users and to process referrals upon user signup.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Medium"
- Requires-Backup: false
- Reversible: true (with a corresponding down migration)

## Structure Details:
- **Alters `public.profiles` table:**
  - Adds `referral_code` (TEXT, UNIQUE): A unique code for each user to share.
  - Adds `referred_by` (UUID): Stores the ID of the user who referred them.
  - Adds `ambassador_level` (TEXT): Stores the user's current ambassador tier (e.g., 'bronze').
- **Creates `public.referrals` table:**
  - `id`: Primary key.
  - `referrer_id`: The user who made the referral.
  - `referee_id`: The new user who was referred.
  - `created_at`: Timestamp of the referral.
- **Creates `public.generate_referral_code()` function:**
  - Generates a unique 6-character alphanumeric code prefixed with 'TRZ'.
- **Creates `public.set_referral_code_on_signup()` function and trigger:**
  - Automatically assigns a referral code to each new user.
- **Creates `public.handle_new_referral()` function and trigger:**
  - Runs after a new user signs up, checks for a referral code in metadata, and creates the referral relationship.

## Security Implications:
- RLS Status: Enabled on the new `referrals` table.
- Policy Changes: Adds a new policy allowing users to only see the referrals they have made.
- Auth Requirements: The `handle_new_referral` trigger is defined with `SECURITY DEFINER` to allow it to read from `public.profiles` and write to `public.referrals` and `public.profiles` on behalf of the system when a new user signs up. This is a standard and secure pattern for this type of operation.

## Performance Impact:
- Indexes: A unique index is automatically created for `profiles.referral_code`. The primary key and foreign keys on `referrals` will also have indexes.
- Triggers: Adds two new triggers. One runs before `profiles` insert, and one runs after `auth.users` insert. The performance impact is negligible as they are simple, indexed operations.
- Estimated Impact: Low. The changes are well-indexed and will not significantly impact database performance.
*/

-- Add referral system columns to profiles
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS referral_code TEXT UNIQUE,
ADD COLUMN IF NOT EXISTS referred_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,
ADD COLUMN IF NOT EXISTS ambassador_level TEXT NOT NULL DEFAULT 'bronze';

-- Create referrals table to track relationships
CREATE TABLE IF NOT EXISTS public.referrals (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    referrer_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    referee_id UUID NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Enable RLS for referrals table
ALTER TABLE public.referrals ENABLE ROW LEVEL SECURITY;

-- Policies for referrals table
DROP POLICY IF EXISTS "Users can view their own referrals" ON public.referrals;
CREATE POLICY "Users can view their own referrals"
ON public.referrals FOR SELECT
USING (auth.uid() = referrer_id);

-- Function to generate a random referral code
CREATE OR REPLACE FUNCTION public.generate_referral_code()
RETURNS TEXT AS $$
DECLARE
    new_code TEXT;
    is_duplicate BOOLEAN;
BEGIN
    LOOP
        new_code := 'TRZ' || substr(md5(random()::text), 0, 7);
        SELECT EXISTS (SELECT 1 FROM public.profiles WHERE referral_code = new_code) INTO is_duplicate;
        EXIT WHEN NOT is_duplicate;
    END LOOP;
    RETURN new_code;
END;
$$ LANGUAGE plpgsql VOLATILE;

-- Trigger to automatically assign a referral code to new users
DROP TRIGGER IF EXISTS on_profile_created_set_referral_code ON public.profiles;
CREATE TRIGGER on_profile_created_set_referral_code
BEFORE INSERT ON public.profiles
FOR EACH ROW
WHEN (NEW.referral_code IS NULL)
EXECUTE FUNCTION public.set_referral_code_on_signup();

-- Function to handle new referral on user signup
CREATE OR REPLACE FUNCTION public.handle_new_referral()
RETURNS TRIGGER AS $$
DECLARE
    referrer_profile RECORD;
BEGIN
    -- Check if a referral code was provided in the user metadata
    IF NEW.raw_user_meta_data->>'referral_code' IS NOT NULL THEN
        -- Find the referrer's profile using the code
        SELECT id INTO referrer_profile FROM public.profiles WHERE referral_code = NEW.raw_user_meta_data->>'referral_code';

        -- If a referrer is found
        IF referrer_profile.id IS NOT NULL THEN
            -- Insert a record into the referrals table
            INSERT INTO public.referrals (referrer_id, referee_id)
            VALUES (referrer_profile.id, NEW.id);

            -- Update the new user's profile with the referrer's ID
            UPDATE public.profiles
            SET referred_by = referrer_profile.id
            WHERE id = NEW.id;
        END IF;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- This trigger will run after a new user is created in auth.users
DROP TRIGGER IF EXISTS on_auth_user_created_handle_referral ON auth.users;
CREATE TRIGGER on_auth_user_created_handle_referral
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.handle_new_referral();
