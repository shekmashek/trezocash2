/*
          # [Operation Name]
          Create invite_collaborator RPC function

          ## Query Description: [This operation creates a secure PostgreSQL function 'invite_collaborator' that allows a project owner to grant access to another user. It handles user existence checks and permission creation on the server-side, avoiding client-side security limitations and ensuring a more robust collaboration feature.]
          
          ## Metadata:
          - Schema-Category: ["Structural"]
          - Impact-Level: ["Medium"]
          - Requires-Backup: [true]
          - Reversible: [true]
          
          ## Structure Details:
          [
  "invite_collaborator"
]
          
          ## Security Implications:
          - RLS Status: [N/A]
          - Policy Changes: [No]
          - Auth Requirements: [Server-side function with security definer]
          
          ## Performance Impact:
          - Indexes: [Not Modified]
          - Triggers: [Not Modified]
          - Estimated Impact: [Low. The function is only called on user action.]
          */
CREATE OR REPLACE FUNCTION public.invite_collaborator(
    p_invitee_email text,
    p_role text,
    p_permission_scope text,
    p_project_ids uuid[]
)
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    invitee_id uuid;
    inviter_id uuid := auth.uid();
    new_collaborator_record collaborators;
BEGIN
    -- Find the user to invite by email
    SELECT id INTO invitee_id FROM auth.users WHERE email = p_invitee_email;

    -- If user does not exist, return a specific message
    IF invitee_id IS NULL THEN
        RETURN json_build_object('message', 'User does not exist');
    END IF;

    -- Prevent inviting self
    IF invitee_id = inviter_id THEN
        RETURN json_build_object('error', 'Vous ne pouvez pas vous inviter vous-même.');
    END IF;

    -- Check if already a collaborator for any of these projects
    IF EXISTS (
        SELECT 1 FROM collaborators
        WHERE user_id = invitee_id AND project_ids && p_project_ids
    ) THEN
        RETURN json_build_object('error', 'Cet utilisateur est déjà un collaborateur sur au moins un de ces projets.');
    END IF;

    -- Create the collaboration record
    INSERT INTO collaborators (owner_id, user_id, email, role, permission_scope, project_ids, status)
    VALUES (inviter_id, invitee_id, p_invitee_email, p_role, p_permission_scope, p_project_ids, 'accepted')
    RETURNING * INTO new_collaborator_record;

    RETURN to_json(new_collaborator_record);
EXCEPTION
    WHEN others THEN
        RETURN json_build_object('error', SQLERRM);
END;
$$;
