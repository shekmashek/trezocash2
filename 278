import React, { useState, useMemo } from 'react';
import { useData } from '../context/DataContext';
import { useUI } from '../context/UIContext';
import { inviteCollaborator, revokeCollaborator } from '../context/actions';
import Avatar from './Avatar';
import { Send, Trash2, Users, AlertTriangle, UserPlus } from 'lucide-react';

const UserManagementView = () => {
    const { dataState, dataDispatch } = useData();
    const { uiState, uiDispatch } = useUI();
    const { session, projects, collaborators, allProfiles } = dataState;
    const { activeProjectId } = uiState;

    const [inviteEmail, setInviteEmail] = useState('');
    const [inviteRole, setInviteRole] = useState('viewer');
    const [inviteScope, setInviteScope] = useState('all');

    const activeProject = useMemo(() => projects.find(p => p.id === activeProjectId), [projects, activeProjectId]);
    const isConsolidated = activeProjectId === 'consolidated' || activeProjectId?.startsWith('consolidated_view_');

    const projectCollaborators = useMemo(() => {
        if (!activeProjectId || isConsolidated) return [];
        const team = [];

        const ownerProfile = allProfiles.find(p => p.id === activeProject?.user_id);
        if (ownerProfile) {
            team.push({ ...ownerProfile, role: 'Propriétaire', isOwner: true });
        }

        collaborators.forEach(c => {
            if (c.projectIds?.includes(activeProjectId) && c.status === 'accepted') {
                const profile = allProfiles.find(p => p.id === c.user_id);
                if (profile) {
                    team.push({ ...profile, role: c.role === 'editor' ? 'Éditeur' : 'Lecteur', collabId: c.id });
                }
            }
        });
        return team;
    }, [activeProjectId, collaborators, allProfiles, projects, activeProject, isConsolidated]);
    
    const handleInvite = (e) => {
        e.preventDefault();
        if (!inviteEmail.trim()) {
            uiDispatch({ type: 'ADD_TOAST', payload: { message: "Veuillez saisir un e-mail.", type: 'error' } });
            return;
        }
        inviteCollaborator({ dataDispatch, uiDispatch }, {
            email: inviteEmail,
            role: inviteRole,
            permissionScope: inviteScope,
            projectIds: [activeProjectId]
        });
        setInviteEmail('');
    };

    const handleRevoke = (collabId, name) => {
        uiDispatch({
            type: 'OPEN_CONFIRMATION_MODAL',
            payload: {
                title: `Révoquer l'accès de ${name} ?`,
                message: 'Cette personne perdra l\'accès à ce projet. Cette action est irréversible.',
                onConfirm: () => revokeCollaborator({ dataDispatch, uiDispatch }, collabId),
            }
        });
    };

    if (isConsolidated) {
        return (
            <div className="bg-yellow-50 border border-yellow-200 text-yellow-800 p-4 rounded-lg flex items-start gap-3">
                <AlertTriangle className="w-5 h-5 flex-shrink-0 mt-0.5" />
                <div>
                    <h4 className="font-bold">Vue Consolidée</h4>
                    <p className="text-sm">La gestion des collaborateurs se fait par projet. Veuillez sélectionner un projet spécifique pour inviter ou gérer les accès.</p>
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-8">
            <div className="bg-white p-6 rounded-lg shadow-sm border">
                <h3 className="font-semibold text-lg text-gray-800 mb-4 flex items-center gap-2"><UserPlus className="w-5 h-5 text-blue-600" /> Inviter un collaborateur</h3>
                <form onSubmit={handleInvite} className="space-y-4">
                    <input type="email" value={inviteEmail} onChange={(e) => setInviteEmail(e.target.value)} placeholder="nom@exemple.com" className="w-full px-3 py-2 border rounded-lg" required />
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-600 mb-1">Rôle</label>
                            <select value={inviteRole} onChange={(e) => setInviteRole(e.target.value)} className="w-full px-3 py-2 border rounded-lg bg-white">
                                <option value="viewer">Lecteur</option>
                                <option value="editor">Éditeur</option>
                            </select>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-600 mb-1">Permissions</label>
                            <select value={inviteScope} onChange={(e) => setInviteScope(e.target.value)} className="w-full px-3 py-2 border rounded-lg bg-white">
                                <option value="all">Entrées & Sorties</option>
                                <option value="income_only">Entrées seulement</option>
                                <option value="expense_only">Sorties seulement</option>
                            </select>
                        </div>
                    </div>
                    <button type="submit" className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg flex items-center justify-center gap-2">
                        <Send className="w-4 h-4" /> Envoyer l'invitation
                    </button>
                </form>
            </div>

            <div className="bg-white p-6 rounded-lg shadow-sm border">
                <h3 className="font-semibold text-lg text-gray-800 mb-4 flex items-center gap-2"><Users className="w-5 h-5 text-purple-600" /> Équipe du projet</h3>
                <div className="space-y-2">
                    {projectCollaborators.map(member => (
                        <div key={member.id} className="flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg group">
                            <div className="flex items-center gap-3">
                                <Avatar name={member.full_name} role={member.role} />
                                <div>
                                    <p className="font-medium text-sm text-gray-800">{member.full_name}</p>
                                    <p className="text-xs text-gray-500">{member.role}</p>
                                </div>
                            </div>
                            {!member.isOwner && (
                                <button onClick={() => handleRevoke(member.collabId, member.full_name)} className="p-1 text-red-500 hover:text-red-700 opacity-0 group-hover:opacity-100 transition-opacity" title="Révoquer l'accès">
                                    <Trash2 size={16} />
                                </button>
                            )}
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default UserManagementView;
